{"version":3,"sources":["MessageManager.min.js"],"names":["MessageManager","this","messageStack","prototype","add","message","_this","set","remove","_calculateMessage","length","undefined","messageContainer","clear","getOutstandingMessages","messages","i","addend","direction","isAdd","loopMessageContainer","splice","push"],"mappings":"AAKA,GAAIA,gBAAkB,WAClB,QAASA,KACLC,KAAKC,gBA6ET,MArEAF,GAAeG,UAAUC,IAAM,SAAUC,GACrC,GAAIC,GAAQL,IAEZ,OADAA,MAAKM,IAAIF,GAAS,GACX,WACHC,EAAME,OAAOH,KAGrBL,EAAeG,UAAUM,kBAAoB,WACzC,GAAiC,IAA7BR,KAAKC,aAAaQ,OAElB,YADAT,KAAKI,QAAUM,OAInB,IAAIC,GAAmBX,KAAKC,aAAaD,KAAKC,aAAaQ,OAAS,EACpET,MAAKI,QAAUO,EAAiBP,SAOpCL,EAAeG,UAAUU,MAAQ,WAC7BZ,KAAKC,gBACLD,KAAKI,QAAUM,QAKnBX,EAAeG,UAAUW,uBAAyB,WAE9C,IAAK,GADDC,MACKC,EAAI,EAAGA,EAAIf,KAAKC,aAAaQ,OAAQM,IAAK,CAC/C,GAAIJ,GAAmBX,KAAKC,aAAac,EACzCD,GAASH,EAAiBP,SAAW,CACrC,IAAIY,GAAwC,MAA/BL,EAAiBM,UAAoB,EAAI,EACtDH,GAASH,EAAiBP,UAAYY,EAE1C,MAAOF,IAMXf,EAAeG,UAAUK,OAAS,SAAUH,GACxCJ,KAAKM,IAAIF,GAAS,IAOtBL,EAAeG,UAAUI,IAAM,SAAUF,EAASc,GAG9C,IAAK,GAFDD,GAAYC,KAAU,EAAQ,IAAM,IAE/BH,EAAIf,KAAKC,aAAaQ,OAAS,EAAGM,GAAK,EAAGA,IAAK,CACpD,GAAII,GAAuBnB,KAAKC,aAAac,EAC7C,IAAII,EAAqBf,UAAYA,GAC7Be,EAAqBF,YAAcA,EAInC,MAFAjB,MAAKC,aAAamB,OAAOL,EAAG,OAC5Bf,MAAKQ,oBAMjB,GAAIG,IAAqBM,UAAWA,EAAWb,QAASA,EACxDJ,MAAKC,aAAaoB,KAAKV,GACvBX,KAAKQ,qBAEFT","file":"MessageManager.min.js","sourcesContent":["/**\n * @license MessageManager v1.0.0\n * (c) 2016 Bronley Plumb\n * License: MIT\n */\nvar MessageManager = (function () {\n    function MessageManager() {\n        this.messageStack = [];\n    }\n    /**\n     * Adds a new message to the manager, or increments the given message if it already exists\n     * @param {string} message - the message\n     * @return {Function} - A function that, when called, will remove the message.\n     *                      Alternatively, you can call MessageManager::remove(message) with the same message text.\n     */\n    MessageManager.prototype.add = function (message) {\n        var _this = this;\n        this.set(message, true);\n        return function () {\n            _this.remove(message);\n        };\n    };\n    MessageManager.prototype._calculateMessage = function () {\n        if (this.messageStack.length === 0) {\n            this.message = undefined;\n            return;\n        }\n        // find the most recent message\n        var messageContainer = this.messageStack[this.messageStack.length - 1];\n        this.message = messageContainer.message;\n        var something = 'hello';\n        var someOtherThing = something;\n    };\n    /**\n     * Clears all messages\n     */\n    MessageManager.prototype.clear = function () {\n        this.messageStack = [];\n        this.message = undefined;\n    };\n    /**\n     * Get the list of messages that have not yet been resolved\n     */\n    MessageManager.prototype.getOutstandingMessages = function () {\n        var messages = {};\n        for (var i = 0; i < this.messageStack.length; i++) {\n            var messageContainer = this.messageStack[i];\n            messages[messageContainer.message] = 0;\n            var addend = messageContainer.direction === '+' ? 1 : -1;\n            messages[messageContainer.message] += addend;\n        }\n        return messages;\n    };\n    /**\n     * Removes a message from the manager, or decrements the message if it already exists\n     * @param {string} message - the message\n     */\n    MessageManager.prototype.remove = function (message) {\n        this.set(message, false);\n    };\n    /**\n     * Adds or removes a message from the manager.\n     * @param {string} message - the message\n     * @param {boolean} [isAdd=true] - if true, a message is added or incremented. If false, a message is removed or decrimented\n     */\n    MessageManager.prototype.set = function (message, isAdd) {\n        var direction = isAdd === false ? '-' : '+';\n        // find an opposite messages to this one. \n        for (var i = this.messageStack.length - 1; i >= 0; i--) {\n            var loopMessageContainer = this.messageStack[i];\n            if (loopMessageContainer.message === message) {\n                if (loopMessageContainer.direction !== direction) {\n                    // remove \n                    this.messageStack.splice(i, 1);\n                    this._calculateMessage();\n                    return;\n                }\n            }\n        }\n        // we did not return, so that means this is a new message. add it to the list\n        var messageContainer = { direction: direction, message: message };\n        this.messageStack.push(messageContainer);\n        this._calculateMessage();\n    };\n    return MessageManager;\n}());\n"]}